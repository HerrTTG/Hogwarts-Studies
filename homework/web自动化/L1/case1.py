# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait


class Test_web():
    def setup_class(self):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3)

    def teardown_class(self):
        self.driver.quit()

    @pytest.mark.parametrize("search", ['SeleniumA', 'Appium面', '面试'])
    def test_case1(self, search):
        # Test name: 测试人论坛搜索
        # Step # | name | target | value
        # 1 | open | / |
        self.driver.get("https://ceshiren.com/")
        # 2 | click | css=.d-icon-search |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.element_to_be_clickable(
                (By.CSS_SELECTOR, ".d-icon-search")))
        self.driver.find_element(By.CSS_SELECTOR, ".d-icon-search").click()
        # 3 | click | css=.d-icon-sliders-h |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.element_to_be_clickable(
                (By.CSS_SELECTOR, ".d-icon-sliders-h")))
        self.driver.find_element(By.CSS_SELECTOR, ".d-icon-sliders-h").click()
        # 4 | click | css=[aria-label='输入搜索关键字'] |
        self.driver.find_element(By.CSS_SELECTOR, "[aria-label='输入搜索关键字']").click()
        # 5 | type | css=[aria-label='输入搜索关键字']|
        self.driver.find_element(By.CSS_SELECTOR, "[aria-label='输入搜索关键字']").send_keys(search)
        # 6 | click | css=.btn-primary > .fa |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.element_to_be_clickable(
                (By.XPATH, "/html/body/section/div/div[2]/div[2]/div[2]/div[2]/div[1]/button")))
        self.driver.find_element(By.XPATH, "/html/body/section/div/div[2]/div[2]/div[2]/div[2]/div[1]/button").click()

        time.sleep(2)
        # 7 | finds |
        ls_t = self.driver.find_elements(By.CSS_SELECTOR, '.topic-title')
        ls_h = self.driver.find_elements(By.CSS_SELECTOR, '.search-highlight')

        # 8 | assert|
        try:
            assert search in ls_h[0].text
        except:
            if search in ls_t[0].text:
                pass
            else:
                print('查询结果失败')
                raise AssertionError

        else:
            print(ls_t[0].text)
